.masonry {
  // scss-docs-start masonry-css-vars
  --#{$prefix}masonry-gap: #{$masonry-gap};
  // scss-docs-end masonry-css-vars
  display: grid;
  gap: var(--#{$prefix}masonry-gap);
}

.masonry-item {
  display: flex;
  flex-direction: column;

  > * {
    flex-grow: 1;
  }
}

// Make sure that elements with certain aspect-ratio inside can adjust height
.masonry-item > .aspect {
  width: 100%;
  overflow: visible;
}

// Only make the rows of equal height if there is a special CSS class
@include media-breakpoint-up($masonry-breakpoint) {
  .masonry-auto-rows {
    grid-auto-rows: 1fr;
  }
}

// Pattern 1
.masonry-pattern-1 {
  @include media-breakpoint-up($masonry-breakpoint) {
    grid-template-columns: repeat(2, 1fr);

    > .masonry-item {
      &:nth-child(8n + 1) {
        grid-area: span 2 / span 2;
      }

      &:nth-child(8n + 2) {
        grid-area: span 2 / span 1;
      }

      &:nth-child(8n + 5) {
        grid-area: span 2 / span 1;
      }

      &:nth-child(8n + 8) {
        grid-area: span 2 / span 2;
      }
    }
  }

  @include media-breakpoint-up($masonry-group-breakpoint) {
    grid-template-columns: repeat(4, 1fr);

    > .masonry-item {
      @for $i from 0 through 3 { // Repeat for 4 groups (7, 14, 21, 28)
        $index: (8 + 8 * $i) - 1; // Calculate the index for nth-child

        &:nth-child(#{$index}) {
          grid-row-start: 4 + 4 * $i;
          grid-column-start: 2;
        }
      }
    }
  }
}

// Pattern 2
.masonry-pattern-2 {
  @include media-breakpoint-up($masonry-breakpoint) {
    grid-template-columns: repeat(2, 1fr);

    > .masonry-item {
      &:nth-child(7n + 1) {
        grid-area: span 2 / span 2;
      }

      &:nth-child(7n + 4) {
        grid-area: span 2 / span 2;
      }
    }
  }

  @include media-breakpoint-between($masonry-breakpoint, $masonry-group-breakpoint) {
    > .masonry-item {
      &:nth-child(7n + 7) {
        grid-area: span 2 / span 2;
      }
    }
  }

  @include media-breakpoint-up($masonry-group-breakpoint) {
    grid-template-columns: repeat(4, 1fr);

    > .masonry-item {
      &:nth-child(7n + 5) {
        grid-area: span 2 / span 2;
      }
    }
  }
}

// Pattern 3
.masonry-pattern-3 {
  @include media-breakpoint-up($masonry-breakpoint) {
    grid-template-columns: repeat(2, 1fr);

    > .masonry-item {
      &:nth-child(7n + 1) {
        grid-area: span 1 / span 2;
      }

      &:nth-child(7n + 2) {
        grid-area: span 2 / span 2;
      }

      &:nth-child(7n + 5) {
        grid-area: span 2 / span 2;
      }
    }
  }

  @include media-breakpoint-up($masonry-group-breakpoint) {
    grid-template-columns: repeat(4, 1fr);

    > .masonry-item {
      &:nth-child(7n + 1) {
        grid-area: span 4 / span 1;
      }

      &:nth-child(7n + 2) {
        grid-area: span 2 / span 2;
      }

      &:nth-child(7n + 5) {
        grid-area: span 2 / span 2;
      }
    }
  }
}

// Pattern 4
.masonry-pattern-4 {
  @include media-breakpoint-up($masonry-breakpoint) {
    grid-template-columns: repeat(4, 1fr);

    > .masonry-item {
      &:nth-child(8n + 1) {
        grid-area: span 1 / span 4;
      }

      &:nth-child(8n + 2) {
        grid-area: span 2 / span 4;
      }
    }
  }

  @include media-breakpoint-between($masonry-breakpoint, $masonry-group-breakpoint) {
    > .masonry-item {
      &:nth-child(8n + 3) {
        grid-area: span 1 / span 2;
      }

      &:nth-child(8n + 4) {
        grid-area: span 1 / span 2;
      }
    }
  }

  @include media-breakpoint-up($masonry-group-breakpoint) {
    > .masonry-item {
      &:nth-child(8n + 1) {
        grid-area: span 1 / span 2;
      }

      &:nth-child(8n + 2) {
        grid-area: span 2 / span 2;
      }
    }
  }
}

// Pattern 5
.masonry-pattern-5 {
  @include media-breakpoint-up($masonry-breakpoint) {
    grid-template-columns: repeat(2, 1fr);

    > .masonry-item {
      &:nth-child(7n + 1) {
        grid-area: span 1 / span 2;
      }

      &:nth-child(7n + 7) {
        grid-area: span 1 / span 2;
      }
    }
  }

  @include media-breakpoint-between($masonry-breakpoint, $masonry-group-breakpoint) {
    > .masonry-item {
      &:nth-child(7n + 4) {
        grid-area: span 1 / span 2;
      }
    }
  }

  @include media-breakpoint-up($masonry-group-breakpoint) {
    grid-template-columns: repeat(3, 1fr);
  }
}

// Pattern 6
.masonry-pattern-6 {
  @include media-breakpoint-between($masonry-breakpoint, $masonry-group-breakpoint) {
    grid-template-columns: repeat(2, 1fr);

    > .masonry-item {
      grid-area: span 2 / span 1;

      &:nth-child(1) {
        grid-column-start: 2;
      }
    }
  }

  @include media-breakpoint-up($masonry-group-breakpoint) {
    display: grid;
    grid-template-columns: repeat(3, 1fr);

    > .masonry-item {
      grid-area: span 2 / span 1;

      &:nth-child(1) {
        grid-row-start: 2;
        grid-row-end: span 2;
      }

      &:nth-child(3) {
        grid-row-start: 2;
        grid-row-end: span 2;
        grid-column-start: 3;
      }
    }
  }
}

// Pattern 7
.masonry-pattern-7 {
  @include media-breakpoint-up($masonry-breakpoint) {
    grid-template-columns: repeat(12, 1fr);

    > .masonry-item {
      grid-area: span 1 / span 3;

      &:nth-child(12n + 1) {
        grid-area: span 2 / span 12;
      }

      &:nth-child(12n + 2),
      &:nth-child(12n + 3),
      &:nth-child(12n + 4),
      &:nth-child(12n + 5) {
        grid-area: span 2 / span 6;
      }

      &:nth-child(12n + 6),
      &:nth-child(12n + 7),
      &:nth-child(12n + 8) {
        grid-area: span 2 / span 4;
      }
    }
  }

  @include media-breakpoint-up($masonry-group-breakpoint) {
    > .masonry-item {
      grid-area: span 2 / span 3;

      &:nth-child(12n + 2) {
        grid-area: span 2 / span 8;
      }

      &:nth-child(12n + 3) {
        grid-area: span 2 / span 4;
      }
    }
  }
}
