"use strict";(self.webpackChunkopenfrontend_framework=self.webpackChunkopenfrontend_framework||[]).push([[681],{3163:function(e,t,n){n.r(t),n.d(t,{initMultiple:function(){return a}});var r=n(3066);const l='input[type="checkbox"]',c={},i={};class s extends r.Z{constructor(e,t){super(e,t),this._fields=[...this._element.querySelectorAll(l)],this._togglers=[...this._element.querySelectorAll('button[type="button"]')],this._initFields(),this._initTogglers(),this._element.dispatchEvent(new CustomEvent("initialized.of.check_tree"))}static get Default(){return i}static get DefaultType(){return c}static get NAME(){return"check_tree"}_initFields(){this._fields.forEach((e=>{this._updateField(e),e.addEventListener("change",(()=>this._updateField(e)))}))}_initTogglers(){this._togglers.forEach((e=>e.addEventListener("click",(()=>{"true"===e.ariaExpanded?this._collapseToggler(e):this._expandToggler(e)}))))}_updateField(e){const t=this._getFieldSubtree(e);t&&t.querySelectorAll(l).forEach((t=>t.checked=e.checked)),this._getParentFields(e).forEach((e=>{const t=[...this._getFieldSubtree(e).querySelectorAll(l)],n=t.filter((e=>e.checked)).length;switch(!0){case n===t.length:e.checked=!0,e.indeterminate=!1;break;case n>0:e.checked=!1,e.indeterminate=!0;break;case 0===n:e.checked=!1,e.indeterminate=!1}console.log(e),console.log(t),console.log("checkedFields: ".concat(n," / ").concat(t.length))}))}_getFieldSubtree(e){return e.closest("li").querySelector(":scope > ul")}_getParentFields(e){const t=[];let n=e.closest("li").parentElement;for(;n&&n!==this._element;)"LI"===n.tagName&&t.push(n.querySelector(":scope > * > ".concat(l))),n=n.parentElement;return t}_collapseToggler(e){e.ariaExpanded="false",e.parentElement.ariaExpanded="false"}_expandToggler(e){e.ariaExpanded="true",e.parentElement.ariaExpanded="true"}}function a(e){for(const t of e)s.getOrCreateInstance(t,t.dataset.ofCheckTree?JSON.parse(t.dataset.ofCheckTree):{})}t.default=s}}]);