.masonry {
  // scss-docs-start masonry-css-vars
  --#{$prefix}masonry-gap: #{$masonry-gap};
  // scss-docs-end masonry-css-vars
  display: grid;
  gap: var(--#{$prefix}masonry-gap);
}

.masonry-item,
.masonry-group-item {
  display: flex;
  flex-direction: column;

  > * {
    flex-grow: 1;
  }
}

// Make sure that elements with certain aspect-ratio inside can adjust height
.masonry-item > .aspect {
  overflow: visible;
}

// Group
.masonry-group-2 {
  @include media-breakpoint-up($masonry-group-breakpoint) {
    grid-template-columns: 1fr 1fr;
  }
}

// Layout 1
.masonry-vertical-1 {
  @include media-breakpoint-up($masonry-breakpoint) {
    grid-template-rows: 1fr;
    grid-template-columns: 1fr;
  }
}

.masonry-vertical-2 {
  @include media-breakpoint-up($masonry-breakpoint) {
    grid-template-rows: 1fr 1fr;
    grid-template-columns: 1fr 1fr;

    > .masonry-item {
      grid-area: span 1 / span 2;
    }
  }
}

.masonry-vertical-3 {
  @include media-breakpoint-up($masonry-breakpoint) {
    grid-template-rows: 1fr 1fr;
    grid-template-columns: 1fr 1fr;

    > .masonry-item {
      &:nth-child(3n + 3) {
        grid-area: span 1 / span 2;
      }
    }
  }
}

.masonry-vertical-4 {
  @include media-breakpoint-up($masonry-breakpoint) {
    grid-template-rows: 1fr 1fr;
    grid-template-columns: 1fr 1fr;

    > .masonry-item {
      &:nth-child(3n + 1) {
        grid-area: span 1 / span 2;
      }
    }
  }
}

.masonry-vertical-5 {
  @include media-breakpoint-up($masonry-breakpoint) {
    grid-template-rows: 1fr 1fr;
    grid-template-columns: 1fr 1fr;

    > .masonry-item {
      &:nth-child(3n + 1) {
        grid-area: span 2 / span 1;
      }
    }
  }
}

.masonry-vertical-6 {
  @include media-breakpoint-up($masonry-breakpoint) {
    grid-template-rows: 1fr 1fr;
    grid-template-columns: 1fr 1fr;

    > .masonry-item {
      &:nth-child(3n + 2) {
        grid-area: span 2 / span 1;
      }
    }
  }
}

.masonry-vertical-7 {
  @include media-breakpoint-up($masonry-breakpoint) {
    grid-template-columns: 1fr 1fr;
  }
}

.masonry-vertical-8 {
  @include media-breakpoint-up($masonry-breakpoint) {
    grid-template-rows: 1fr 1fr;
    grid-template-columns: 1fr 1fr;
  }
}

.masonry-horizontal-1 {
  @include media-breakpoint-up($masonry-breakpoint) {
    grid-template-columns: 1fr 1fr 1fr;

    > .masonry-item {
      grid-column-start: 1;
      grid-column-end: 4;
    }
  }
}

.masonry-horizontal-2 {
  @include media-breakpoint-up($masonry-breakpoint) {
    grid-template-columns: 1fr 1fr 1fr;

    > .masonry-item {
      grid-area: span 1 / span 1;

      &:nth-child(even) {
        grid-area: span 1 / span 2;
      }
    }
  }
}

.masonry-horizontal-3 {
  @include media-breakpoint-up($masonry-breakpoint) {
    grid-template-columns: 1fr 1fr 1fr;

    > .masonry-item {
      grid-area: span 1 / span 1;

      &:nth-child(odd) {
        grid-area: span 1 / span 2;
      }
    }
  }
}

.masonry-horizontal-4 {
  @include media-breakpoint-up($masonry-breakpoint) {
    grid-template-columns: 1fr 1fr 1fr;

    > .masonry-item {
      grid-area: span 1 / span 1;
    }
  }
}

// Pattern 1
.masonry-pattern-4-1 {
  @include media-breakpoint-up($masonry-breakpoint) {
    grid-template-columns: repeat(4, 1fr);
    grid-auto-rows: 1fr;

    > .masonry-item {
      grid-area: span 1 / span 1;

      &:nth-child(4n + 1) {
        grid-area: span 2 / span 2;
      }

      &:nth-child(4n + 2) {
        grid-area: span 2 / span 1;
      }
    }
  }
}

// Pattern 2
.masonry-pattern-10-1 {
  @include media-breakpoint-up($masonry-breakpoint) {
    grid-template-columns: repeat(4, 1fr);
    grid-auto-rows: 1fr;

    > .masonry-item {
      grid-area: span 1 / span 1;

      &:nth-child(10n + 1) {
        grid-area: span 2 / span 2;
      }

      &:nth-child(10n + 8) {
        grid-area: span 2 / span 2;
      }
    }
  }
}

// Pattern 3
.masonry-pattern-10-2 {
  @include media-breakpoint-up($masonry-breakpoint) {
    grid-template-columns: repeat(4, 1fr);
    grid-auto-rows: 1fr;

    > .masonry-item {
      grid-area: span 1 / span 1;

      &:nth-child(10n + 1) {
        grid-area: span 1 / span 2;
      }

      &:nth-child(10n + 2) {
        grid-area: span 2 / span 2;
      }

      &:nth-child(10n + 9) {
        grid-area: span 1 / span 2;
      }

      &:nth-child(10n + 10) {
        grid-area: span 1 / span 2;
      }
    }
  }
}

// Pattern 4
.masonry-pattern-7-1 {
  @include media-breakpoint-up($masonry-breakpoint) {
    grid-template-columns: repeat(4, 1fr);
    grid-auto-rows: 1fr;

    > .masonry-item {
      &:nth-child(7n + 1) {
        grid-area: span 2 / span 2;
      }

      &:nth-child(7n + 4) {
        grid-area: span 2 / span 2;
      }

      &:nth-child(7n + 5) {
        grid-area: span 2 / span 2;
      }
    }
  }
}

// Pattern 5
.masonry-pattern-8-1 {
  @include media-breakpoint-up($masonry-breakpoint) {
    grid-template-columns: repeat(4, 1fr);
    grid-auto-rows: 1fr;

    > .masonry-item {
      &:nth-child(8n + 1) {
        grid-area: span 2 / span 2;
      }

      &:nth-child(8n + 2) {
        grid-area: span 2 / span 2;
      }

      &:nth-child(8n + 3) {
        grid-area: span 1 / span 2;
      }

      &:nth-child(8n + 4) {
        grid-area: span 1 / span 2;
      }
    }
  }
}

// Pattern 6
.masonry-pattern-7-2 {
  @include media-breakpoint-up($masonry-breakpoint) {
    grid-template-columns: repeat(4, 1fr);
    grid-auto-rows: 1fr;

    > .masonry-item {
      &:nth-child(7n + 1) {
        grid-area: span 4 / span 1;
      }

      &:nth-child(7n + 2) {
        grid-area: span 2 / span 2;
      }

      &:nth-child(7n + 5) {
        grid-area: span 2 / span 2;
      }
    }
  }
}

// Pattern 7
.masonry-pattern-5-1 {
  @include media-breakpoint-up($masonry-breakpoint) {
    grid-template-columns: repeat(4, 1fr);
    grid-auto-rows: 1fr;

    > .masonry-item {
      &:nth-child(5n + 1) {
        grid-area: span 2 / span 1;
      }

      &:nth-child(5n + 2) {
        grid-area: span 1 / span 3;
      }
    }
  }
}
